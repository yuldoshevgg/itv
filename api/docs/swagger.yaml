basePath: /api
definitions:
  movie.ErrorResponse:
    properties:
      message:
        type: string
    type: object
  movie.Movie:
    properties:
      created_at:
        type: string
      director:
        type: string
      id:
        type: integer
      plot:
        type: string
      title:
        type: string
      updated_at:
        type: string
      year:
        type: integer
    required:
    - director
    - title
    - year
    type: object
  movie.Response:
    properties:
      Message:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  title: Movie API
  version: "1.0"
paths:
  /login:
    post:
      consumes:
      - application/json
      description: Generates a fake JWT token for a dummy user for testing purposes
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/movie.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/movie.ErrorResponse'
      summary: Generate a fake JWT token
      tags:
      - auth
  /movies:
    get:
      description: Retrieve all movies
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/movie.Movie'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/movie.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all movies
      tags:
      - movies
    post:
      consumes:
      - application/json
      description: Add a new movie
      parameters:
      - description: Movie to create
        in: body
        name: movie
        required: true
        schema:
          $ref: '#/definitions/movie.Movie'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/movie.Movie'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/movie.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new movie
      tags:
      - movies
  /movies/{id}:
    delete:
      description: Delete a movie by ID
      parameters:
      - description: Movie ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/movie.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/movie.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/movie.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a movie
      tags:
      - movies
    get:
      description: Retrieve a movie by ID
      parameters:
      - description: Movie ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/movie.Movie'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/movie.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/movie.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a movie by ID
      tags:
      - movies
    put:
      consumes:
      - application/json
      description: Update an existing movie by ID
      parameters:
      - description: Movie ID
        in: path
        name: id
        required: true
        type: integer
      - description: Movie data to update
        in: body
        name: movie
        required: true
        schema:
          $ref: '#/definitions/movie.Movie'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/movie.Movie'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/movie.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/movie.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a movie
      tags:
      - movies
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
